// <auto-generated />
using System;
using LLJ_CarInsuranceMS_RESTAPI.AuthModels;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LLJ_CarInsuranceMS_RESTAPI.Migrations
{
    [DbContext(typeof(AuthenticationContext))]
    partial class AuthenticationContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "89e19ada-ca96-4854-8d54-c40ad04df6d6",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        },
                        new
                        {
                            Id = "8f126a21-98e1-41cd-af74-596d51449489",
                            Name = "InsuranceAgent",
                            NormalizedName = "INSURANCEAGENT"
                        },
                        new
                        {
                            Id = "a086a404-1d39-46fa-ba83-01ff79ef152b",
                            Name = "ClaimSurveyor",
                            NormalizedName = "CLAIMSURVEYOR"
                        },
                        new
                        {
                            Id = "c24097dd-392e-43df-adc3-afba803404ed",
                            Name = "Driver",
                            NormalizedName = "DRIVER"
                        },
                        new
                        {
                            Id = "9ce59f37-adec-4762-999c-c9312e347816",
                            Name = "PotentialCustomer",
                            NormalizedName = "POTENTIALCUSTOMER"
                        },
                        new
                        {
                            Id = "290d17b6-0a93-4800-a5aa-957c3996c916",
                            Name = "RepairShop",
                            NormalizedName = "REPAIRSHOP"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "e7c6545b-4ee0-4220-8a00-c679bb394123",
                            RoleId = "89e19ada-ca96-4854-8d54-c40ad04df6d6"
                        },
                        new
                        {
                            UserId = "686de8e1-5d8d-4086-acca-119422f8f438",
                            RoleId = "8f126a21-98e1-41cd-af74-596d51449489"
                        },
                        new
                        {
                            UserId = "339ce2d1-c665-4b77-8b02-fbb76ced6d59",
                            RoleId = "a086a404-1d39-46fa-ba83-01ff79ef152b"
                        },
                        new
                        {
                            UserId = "8ee2e870-e891-4726-b9fa-4f8518d8ee24",
                            RoleId = "c24097dd-392e-43df-adc3-afba803404ed"
                        },
                        new
                        {
                            UserId = "42ab0ca5-ed74-4834-a2d8-4135fe765114",
                            RoleId = "9ce59f37-adec-4762-999c-c9312e347816"
                        },
                        new
                        {
                            UserId = "c910c7cf-50a8-4ebf-b1b9-1a4d0a7b40c4",
                            RoleId = "290d17b6-0a93-4800-a5aa-957c3996c916"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("LLJ_CarInsuranceMS_RESTAPI.AuthModels.ApplicationUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("LicenseNumber")
                        .HasColumnType("nvarchar(150)");

                    b.HasDiscriminator().HasValue("ApplicationUser");

                    b.HasData(
                        new
                        {
                            Id = "e7c6545b-4ee0-4220-8a00-c679bb394123",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ce526088-0c6c-44f8-8329-b482cc817724",
                            Email = "Admin_1@cims.gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedUserName = "HIGHLORDCIMSADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEL0GHuBrNNLcDxZYaucZl/Uc3WFWybctJ5SvFMcDYYt6bEXpoYXxkPdExwXSw14pUQ==",
                            PhoneNumber = "025-897-6314",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "58c20601-0714-4508-9d7c-f8b8c9b2fe17",
                            TwoFactorEnabled = false,
                            UserName = "HighLordCIMSAdmin",
                            FullName = "CarInsuranceMSAdmin",
                            LicenseNumber = "CA1207"
                        },
                        new
                        {
                            Id = "686de8e1-5d8d-4086-acca-119422f8f438",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "19b17137-9812-46c0-b613-2d14c1c7469b",
                            Email = "Insurance_1Agent@cims.gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedUserName = "AGENTNEIL",
                            PasswordHash = "AQAAAAIAAYagAAAAEMtDQVUegiGyU0mnK9nnX3VvNERuhyo1Cp/8ucS9rjP5+FZJVezljIDC5rOfPHqYqQ==",
                            PhoneNumber = "026-548-9752",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "cb60e340-fd76-410b-8eec-51d8b81ec9b0",
                            TwoFactorEnabled = false,
                            UserName = "AgentNeil",
                            FullName = "Neil",
                            LicenseNumber = "GP1234"
                        },
                        new
                        {
                            Id = "339ce2d1-c665-4b77-8b02-fbb76ced6d59",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d33417e5-258f-4f5e-9ebc-655a1593db38",
                            Email = "Surveyor_1@cims.gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedUserName = "SLANI",
                            PasswordHash = "AQAAAAIAAYagAAAAECZhCNgpN8VT1qbodXTDOfXMtBeV7wwzC9jc7SAHTZ7K2MDLs7mTmZ47Gpr3/3WesQ==",
                            PhoneNumber = "212-797-2569",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "92f13575-b783-45c0-99a8-98e6589ebb79",
                            TwoFactorEnabled = false,
                            UserName = "SLani",
                            FullName = "Lani",
                            LicenseNumber = "KL1617"
                        },
                        new
                        {
                            Id = "8ee2e870-e891-4726-b9fa-4f8518d8ee24",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "350f9c3e-42f8-4edf-95fa-98b7ebdc76c3",
                            Email = "Driver_1@cims.gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedUserName = "DSETH",
                            PasswordHash = "AQAAAAIAAYagAAAAEBw/nvjT0lMjHa4BwKt2vBGdjMH5SXqHXK1VnapkVELl8RKHyDu/e+GRP77x8ez48Q==",
                            PhoneNumber = "086-765-4548",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "01c4ee58-1d47-409c-b4c2-c7f71c431cb4",
                            TwoFactorEnabled = false,
                            UserName = "DSeth",
                            FullName = "Seth",
                            LicenseNumber = "SA8976"
                        },
                        new
                        {
                            Id = "42ab0ca5-ed74-4834-a2d8-4135fe765114",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6ab1b66f-b38f-4aef-8561-5399a32089d6",
                            Email = "john123@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedUserName = "CJOHN",
                            PasswordHash = "AQAAAAIAAYagAAAAEITPNj8Olk+NOFIUbrdiXrEWm5u3+5pzklE+YuN+8UDwjvrCChvJVQDLSIJ0+V4CMQ==",
                            PhoneNumber = "027-816-3587",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "94fdf1d4-deca-4df0-9929-e8486ce4711d",
                            TwoFactorEnabled = false,
                            UserName = "CJohn",
                            FullName = "John",
                            LicenseNumber = "WK1647"
                        },
                        new
                        {
                            Id = "c910c7cf-50a8-4ebf-b1b9-1a4d0a7b40c4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fac68621-65ce-4452-99fc-d2a33381feeb",
                            Email = "tjauto@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedUserName = "TJREPAIRS",
                            PasswordHash = "AQAAAAIAAYagAAAAEJntlz+y49ODCyTuuES6vpbc/Hf2ik8+NXVLj/l4ir9e/MdbC7Rk5wYiE8HjD7AFBA==",
                            PhoneNumber = "057-643-4654",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "cd779fdc-fcac-4621-a4ba-dc040f522fc1",
                            TwoFactorEnabled = false,
                            UserName = "TJRepairs",
                            FullName = "TJ Auto Repairs",
                            LicenseNumber = "TJ5655"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
